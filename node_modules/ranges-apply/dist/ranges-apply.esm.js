/**
 * @name ranges-apply
 * @fileoverview Take an array of string index ranges, delete/replace the string according to them
 * @version 6.0.12
 * @author Roy Revelt, Codsen Ltd
 * @license MIT
 * {@link https://codsen.com/os/ranges-apply/}
 */

import{rMerge as b}from"ranges-merge";import w from"tiny-invariant";var f="6.0.12";var v=f;function x(s,r,n){let t=0,o=0;if(arguments.length===0)throw new Error("ranges-apply: [THROW_ID_01] inputs missing!");if(typeof s!="string")throw new TypeError(`ranges-apply: [THROW_ID_02] first input argument must be a string! Currently it's: ${typeof s}, equal to: ${JSON.stringify(s,null,4)}`);if(r&&!Array.isArray(r))throw new TypeError(`ranges-apply: [THROW_ID_03] second input argument must be an array (or null)! Currently it's: ${typeof r}, equal to: ${JSON.stringify(r,null,4)}`);if(n&&typeof n!="function")throw new TypeError(`ranges-apply: [THROW_ID_04] the third input argument must be a function (or falsey)! Currently it's: ${typeof n}, equal to: ${JSON.stringify(n,null,4)}`);if(!r||!r.filter(e=>e).length)return s;let a;Array.isArray(r)&&Number.isInteger(r[0])&&Number.isInteger(r[1])?a=[Array.from(r)]:a=Array.from(r);let g=a.length,c=0;a.filter(e=>e).forEach((e,i)=>{if(n&&(t=Math.floor(c/g*10),t!==o&&(o=t,n(t))),!Array.isArray(e))throw new TypeError(`ranges-apply: [THROW_ID_05] ranges array, second input arg., has ${i}th element not an array: ${JSON.stringify(e,null,4)}, which is ${typeof e}`);if(!Number.isInteger(e[0])){if(!Number.isInteger(+e[0])||+e[0]<0)throw new TypeError(`ranges-apply: [THROW_ID_06] ranges array, second input arg. has ${i}th element, array ${JSON.stringify(e,null,0)}. Its first element is not an integer, string index, but ${typeof e[0]}, equal to: ${JSON.stringify(e[0],null,4)}.`);a[i][0]=+a[i][0]}if(!Number.isInteger(e[1])){if(!Number.isInteger(+e[1])||+e[1]<0)throw new TypeError(`ranges-apply: [THROW_ID_07] ranges array, second input arg. has ${i}th element, array ${JSON.stringify(e,null,0)}. Its second element is not an integer, string index, but ${typeof e[1]}, equal to: ${JSON.stringify(e[1],null,4)}.`);a[i][1]=+a[i][1]}c+=1});let p=b(a,{progressFn:e=>{n&&(t=10+Math.floor(e/10),t!==o&&(o=t,n(t)))}});w(p);let y=p.length;if(y>0){let e=s.slice(p[y-1][1]);s=p.reduce((i,$,l,u)=>{n&&(t=20+Math.floor(l/y*80),t!==o&&(o=t,n(t)));let d=l===0?0:u[l-1][1],m=u[l][0];return`${i}${s.slice(d,m)}${u[l][2]||""}`},""),s+=e}return s}export{x as rApply,v as version};
